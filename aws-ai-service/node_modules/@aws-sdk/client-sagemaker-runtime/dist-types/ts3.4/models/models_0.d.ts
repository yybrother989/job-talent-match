import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { SageMakerRuntimeServiceException as __BaseException } from "./SageMakerRuntimeServiceException";
export declare class InternalDependencyException extends __BaseException {
  readonly name: "InternalDependencyException";
  readonly $fault: "server";
  Message?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalDependencyException, __BaseException>
  );
}
export declare class InternalFailure extends __BaseException {
  readonly name: "InternalFailure";
  readonly $fault: "server";
  Message?: string | undefined;
  constructor(opts: __ExceptionOptionType<InternalFailure, __BaseException>);
}
export interface InvokeEndpointInput {
  EndpointName: string | undefined;
  Body: Uint8Array | undefined;
  ContentType?: string | undefined;
  Accept?: string | undefined;
  CustomAttributes?: string | undefined;
  TargetModel?: string | undefined;
  TargetVariant?: string | undefined;
  TargetContainerHostname?: string | undefined;
  InferenceId?: string | undefined;
  EnableExplanations?: string | undefined;
  InferenceComponentName?: string | undefined;
  SessionId?: string | undefined;
}
export interface InvokeEndpointOutput {
  Body: Uint8Array | undefined;
  ContentType?: string | undefined;
  InvokedProductionVariant?: string | undefined;
  CustomAttributes?: string | undefined;
  NewSessionId?: string | undefined;
  ClosedSessionId?: string | undefined;
}
export declare class ModelError extends __BaseException {
  readonly name: "ModelError";
  readonly $fault: "client";
  Message?: string | undefined;
  OriginalStatusCode?: number | undefined;
  OriginalMessage?: string | undefined;
  LogStreamArn?: string | undefined;
  constructor(opts: __ExceptionOptionType<ModelError, __BaseException>);
}
export declare class ModelNotReadyException extends __BaseException {
  readonly name: "ModelNotReadyException";
  readonly $fault: "client";
  Message?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ModelNotReadyException, __BaseException>
  );
}
export declare class ServiceUnavailable extends __BaseException {
  readonly name: "ServiceUnavailable";
  readonly $fault: "server";
  Message?: string | undefined;
  constructor(opts: __ExceptionOptionType<ServiceUnavailable, __BaseException>);
}
export declare class ValidationError extends __BaseException {
  readonly name: "ValidationError";
  readonly $fault: "client";
  Message?: string | undefined;
  constructor(opts: __ExceptionOptionType<ValidationError, __BaseException>);
}
export interface InvokeEndpointAsyncInput {
  EndpointName: string | undefined;
  ContentType?: string | undefined;
  Accept?: string | undefined;
  CustomAttributes?: string | undefined;
  InferenceId?: string | undefined;
  InputLocation: string | undefined;
  RequestTTLSeconds?: number | undefined;
  InvocationTimeoutSeconds?: number | undefined;
}
export interface InvokeEndpointAsyncOutput {
  InferenceId?: string | undefined;
  OutputLocation?: string | undefined;
  FailureLocation?: string | undefined;
}
export declare class InternalStreamFailure extends __BaseException {
  readonly name: "InternalStreamFailure";
  readonly $fault: "server";
  Message?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalStreamFailure, __BaseException>
  );
}
export interface InvokeEndpointWithResponseStreamInput {
  EndpointName: string | undefined;
  Body: Uint8Array | undefined;
  ContentType?: string | undefined;
  Accept?: string | undefined;
  CustomAttributes?: string | undefined;
  TargetVariant?: string | undefined;
  TargetContainerHostname?: string | undefined;
  InferenceId?: string | undefined;
  InferenceComponentName?: string | undefined;
  SessionId?: string | undefined;
}
export declare class ModelStreamError extends __BaseException {
  readonly name: "ModelStreamError";
  readonly $fault: "client";
  Message?: string | undefined;
  ErrorCode?: string | undefined;
  constructor(opts: __ExceptionOptionType<ModelStreamError, __BaseException>);
}
export interface PayloadPart {
  Bytes?: Uint8Array | undefined;
}
export type ResponseStream =
  | ResponseStream.InternalStreamFailureMember
  | ResponseStream.ModelStreamErrorMember
  | ResponseStream.PayloadPartMember
  | ResponseStream.$UnknownMember;
export declare namespace ResponseStream {
  interface PayloadPartMember {
    PayloadPart: PayloadPart;
    ModelStreamError?: never;
    InternalStreamFailure?: never;
    $unknown?: never;
  }
  interface ModelStreamErrorMember {
    PayloadPart?: never;
    ModelStreamError: ModelStreamError;
    InternalStreamFailure?: never;
    $unknown?: never;
  }
  interface InternalStreamFailureMember {
    PayloadPart?: never;
    ModelStreamError?: never;
    InternalStreamFailure: InternalStreamFailure;
    $unknown?: never;
  }
  interface $UnknownMember {
    PayloadPart?: never;
    ModelStreamError?: never;
    InternalStreamFailure?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    PayloadPart: (value: PayloadPart) => T;
    ModelStreamError: (value: ModelStreamError) => T;
    InternalStreamFailure: (value: InternalStreamFailure) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ResponseStream, visitor: Visitor<T>) => T;
}
export interface InvokeEndpointWithResponseStreamOutput {
  Body: AsyncIterable<ResponseStream> | undefined;
  ContentType?: string | undefined;
  InvokedProductionVariant?: string | undefined;
  CustomAttributes?: string | undefined;
}
export declare const InvokeEndpointInputFilterSensitiveLog: (
  obj: InvokeEndpointInput
) => any;
export declare const InvokeEndpointOutputFilterSensitiveLog: (
  obj: InvokeEndpointOutput
) => any;
export declare const InvokeEndpointAsyncInputFilterSensitiveLog: (
  obj: InvokeEndpointAsyncInput
) => any;
export declare const InvokeEndpointWithResponseStreamInputFilterSensitiveLog: (
  obj: InvokeEndpointWithResponseStreamInput
) => any;
export declare const PayloadPartFilterSensitiveLog: (obj: PayloadPart) => any;
export declare const ResponseStreamFilterSensitiveLog: (
  obj: ResponseStream
) => any;
export declare const InvokeEndpointWithResponseStreamOutputFilterSensitiveLog: (
  obj: InvokeEndpointWithResponseStreamOutput
) => any;
