"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  InternalDependencyException: () => InternalDependencyException,
  InternalFailure: () => InternalFailure,
  InternalStreamFailure: () => InternalStreamFailure,
  InvokeEndpointAsyncCommand: () => InvokeEndpointAsyncCommand,
  InvokeEndpointAsyncInputFilterSensitiveLog: () => InvokeEndpointAsyncInputFilterSensitiveLog,
  InvokeEndpointCommand: () => InvokeEndpointCommand,
  InvokeEndpointInputFilterSensitiveLog: () => InvokeEndpointInputFilterSensitiveLog,
  InvokeEndpointOutputFilterSensitiveLog: () => InvokeEndpointOutputFilterSensitiveLog,
  InvokeEndpointWithResponseStreamCommand: () => InvokeEndpointWithResponseStreamCommand,
  InvokeEndpointWithResponseStreamInputFilterSensitiveLog: () => InvokeEndpointWithResponseStreamInputFilterSensitiveLog,
  InvokeEndpointWithResponseStreamOutputFilterSensitiveLog: () => InvokeEndpointWithResponseStreamOutputFilterSensitiveLog,
  ModelError: () => ModelError,
  ModelNotReadyException: () => ModelNotReadyException,
  ModelStreamError: () => ModelStreamError,
  PayloadPartFilterSensitiveLog: () => PayloadPartFilterSensitiveLog,
  ResponseStream: () => ResponseStream,
  ResponseStreamFilterSensitiveLog: () => ResponseStreamFilterSensitiveLog,
  SageMakerRuntime: () => SageMakerRuntime,
  SageMakerRuntimeClient: () => SageMakerRuntimeClient,
  SageMakerRuntimeServiceException: () => SageMakerRuntimeServiceException,
  ServiceUnavailable: () => ServiceUnavailable,
  ValidationError: () => ValidationError,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(index_exports);

// src/SageMakerRuntimeClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_eventstream_serde_config_resolver = require("@smithy/eventstream-serde-config-resolver");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "sagemaker"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/SageMakerRuntimeClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/SageMakerRuntimeClient.ts
var SageMakerRuntimeClient = class extends import_smithy_client.Client {
  static {
    __name(this, "SageMakerRuntimeClient");
  }
  /**
   * The resolved configuration of SageMakerRuntimeClient class. This is resolved and normalized from the {@link SageMakerRuntimeClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_6);
    const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
    const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
    this.config = _config_9;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSageMakerRuntimeHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/SageMakerRuntime.ts


// src/commands/InvokeEndpointAsyncCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/models/models_0.ts


// src/models/SageMakerRuntimeServiceException.ts

var SageMakerRuntimeServiceException = class _SageMakerRuntimeServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "SageMakerRuntimeServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _SageMakerRuntimeServiceException.prototype);
  }
};

// src/models/models_0.ts
var InternalDependencyException = class _InternalDependencyException extends SageMakerRuntimeServiceException {
  static {
    __name(this, "InternalDependencyException");
  }
  name = "InternalDependencyException";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalDependencyException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalDependencyException.prototype);
    this.Message = opts.Message;
  }
};
var InternalFailure = class _InternalFailure extends SageMakerRuntimeServiceException {
  static {
    __name(this, "InternalFailure");
  }
  name = "InternalFailure";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalFailure",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalFailure.prototype);
    this.Message = opts.Message;
  }
};
var ModelError = class _ModelError extends SageMakerRuntimeServiceException {
  static {
    __name(this, "ModelError");
  }
  name = "ModelError";
  $fault = "client";
  Message;
  /**
   * <p> Original status code. </p>
   * @public
   */
  OriginalStatusCode;
  /**
   * <p> Original message. </p>
   * @public
   */
  OriginalMessage;
  /**
   * <p> The Amazon Resource Name (ARN) of the log stream. </p>
   * @public
   */
  LogStreamArn;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ModelError",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelError.prototype);
    this.Message = opts.Message;
    this.OriginalStatusCode = opts.OriginalStatusCode;
    this.OriginalMessage = opts.OriginalMessage;
    this.LogStreamArn = opts.LogStreamArn;
  }
};
var ModelNotReadyException = class _ModelNotReadyException extends SageMakerRuntimeServiceException {
  static {
    __name(this, "ModelNotReadyException");
  }
  name = "ModelNotReadyException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ModelNotReadyException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelNotReadyException.prototype);
    this.Message = opts.Message;
  }
};
var ServiceUnavailable = class _ServiceUnavailable extends SageMakerRuntimeServiceException {
  static {
    __name(this, "ServiceUnavailable");
  }
  name = "ServiceUnavailable";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailable",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUnavailable.prototype);
    this.Message = opts.Message;
  }
};
var ValidationError = class _ValidationError extends SageMakerRuntimeServiceException {
  static {
    __name(this, "ValidationError");
  }
  name = "ValidationError";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationError",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ValidationError.prototype);
    this.Message = opts.Message;
  }
};
var InternalStreamFailure = class _InternalStreamFailure extends SageMakerRuntimeServiceException {
  static {
    __name(this, "InternalStreamFailure");
  }
  name = "InternalStreamFailure";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalStreamFailure",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalStreamFailure.prototype);
    this.Message = opts.Message;
  }
};
var ModelStreamError = class _ModelStreamError extends SageMakerRuntimeServiceException {
  static {
    __name(this, "ModelStreamError");
  }
  name = "ModelStreamError";
  $fault = "client";
  Message;
  /**
   * <p>This error can have the following error codes:</p>
   *          <dl>
   *             <dt>ModelInvocationTimeExceeded</dt>
   *             <dd>
   *                <p>The model failed to finish sending the response within the timeout period
   *                         allowed by Amazon SageMaker AI.</p>
   *             </dd>
   *             <dt>StreamBroken</dt>
   *             <dd>
   *                <p>The Transmission Control Protocol (TCP) connection between the client and
   *                         the model was reset or closed.</p>
   *             </dd>
   *          </dl>
   * @public
   */
  ErrorCode;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ModelStreamError",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelStreamError.prototype);
    this.Message = opts.Message;
    this.ErrorCode = opts.ErrorCode;
  }
};
var ResponseStream;
((ResponseStream3) => {
  ResponseStream3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.PayloadPart !== void 0) return visitor.PayloadPart(value.PayloadPart);
    if (value.ModelStreamError !== void 0) return visitor.ModelStreamError(value.ModelStreamError);
    if (value.InternalStreamFailure !== void 0) return visitor.InternalStreamFailure(value.InternalStreamFailure);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ResponseStream || (ResponseStream = {}));
var InvokeEndpointInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Body && { Body: import_smithy_client.SENSITIVE_STRING },
  ...obj.CustomAttributes && { CustomAttributes: import_smithy_client.SENSITIVE_STRING }
}), "InvokeEndpointInputFilterSensitiveLog");
var InvokeEndpointOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Body && { Body: import_smithy_client.SENSITIVE_STRING },
  ...obj.CustomAttributes && { CustomAttributes: import_smithy_client.SENSITIVE_STRING }
}), "InvokeEndpointOutputFilterSensitiveLog");
var InvokeEndpointAsyncInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.CustomAttributes && { CustomAttributes: import_smithy_client.SENSITIVE_STRING }
}), "InvokeEndpointAsyncInputFilterSensitiveLog");
var InvokeEndpointWithResponseStreamInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Body && { Body: import_smithy_client.SENSITIVE_STRING },
  ...obj.CustomAttributes && { CustomAttributes: import_smithy_client.SENSITIVE_STRING }
}), "InvokeEndpointWithResponseStreamInputFilterSensitiveLog");
var PayloadPartFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Bytes && { Bytes: import_smithy_client.SENSITIVE_STRING }
}), "PayloadPartFilterSensitiveLog");
var ResponseStreamFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
  if (obj.PayloadPart !== void 0) return { PayloadPart: PayloadPartFilterSensitiveLog(obj.PayloadPart) };
  if (obj.ModelStreamError !== void 0) return { ModelStreamError: obj.ModelStreamError };
  if (obj.InternalStreamFailure !== void 0) return { InternalStreamFailure: obj.InternalStreamFailure };
  if (obj.$unknown !== void 0) return { [obj.$unknown[0]]: "UNKNOWN" };
}, "ResponseStreamFilterSensitiveLog");
var InvokeEndpointWithResponseStreamOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Body && { Body: "STREAMING_CONTENT" },
  ...obj.CustomAttributes && { CustomAttributes: import_smithy_client.SENSITIVE_STRING }
}), "InvokeEndpointWithResponseStreamOutputFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");


var se_InvokeEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    [_ct]: input[_CT] || "application/octet-stream",
    [_a]: input[_A],
    [_xasca]: input[_CA],
    [_xastm]: input[_TM],
    [_xastv]: input[_TV],
    [_xastch]: input[_TCH],
    [_xasii]: input[_II],
    [_xasee]: input[_EE],
    [_xasic]: input[_ICN],
    [_xassi]: input[_SI]
  });
  b.bp("/endpoints/{EndpointName}/invocations");
  b.p("EndpointName", () => input.EndpointName, "{EndpointName}", false);
  let body;
  if (input.Body !== void 0) {
    body = input.Body;
  }
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_InvokeEndpointCommand");
var se_InvokeEndpointAsyncCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    [_xasct]: input[_CT],
    [_xasa]: input[_A],
    [_xasca]: input[_CA],
    [_xasii]: input[_II],
    [_xasi]: input[_IL],
    [_xasr]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_RTTLS]), () => input[_RTTLS].toString()],
    [_xasi_]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_ITS]), () => input[_ITS].toString()]
  });
  b.bp("/endpoints/{EndpointName}/async-invocations");
  b.p("EndpointName", () => input.EndpointName, "{EndpointName}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_InvokeEndpointAsyncCommand");
var se_InvokeEndpointWithResponseStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    [_ct]: input[_CT] || "application/octet-stream",
    [_xasa]: input[_A],
    [_xasca]: input[_CA],
    [_xastv]: input[_TV],
    [_xastch]: input[_TCH],
    [_xasii]: input[_II],
    [_xasic]: input[_ICN],
    [_xassi]: input[_SI]
  });
  b.bp("/endpoints/{EndpointName}/invocations-response-stream");
  b.p("EndpointName", () => input.EndpointName, "{EndpointName}", false);
  let body;
  if (input.Body !== void 0) {
    body = input.Body;
  }
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_InvokeEndpointWithResponseStreamCommand");
var de_InvokeEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]],
    [_IPV]: [, output.headers[_xaipv]],
    [_CA]: [, output.headers[_xasca]],
    [_NSI]: [, output.headers[_xasnsi]],
    [_CSI]: [, output.headers[_xascsi]]
  });
  const data = await (0, import_smithy_client.collectBody)(output.body, context);
  contents.Body = data;
  return contents;
}, "de_InvokeEndpointCommand");
var de_InvokeEndpointAsyncCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_OL]: [, output.headers[_xaso]],
    [_FL]: [, output.headers[_xasf]]
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    InferenceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_InvokeEndpointAsyncCommand");
var de_InvokeEndpointWithResponseStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_xasct]],
    [_IPV]: [, output.headers[_xaipv]],
    [_CA]: [, output.headers[_xasca]]
  });
  const data = output.body;
  contents.Body = de_ResponseStream(data, context);
  return contents;
}, "de_InvokeEndpointWithResponseStreamCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalDependencyException":
    case "com.amazonaws.sagemakerruntime#InternalDependencyException":
      throw await de_InternalDependencyExceptionRes(parsedOutput, context);
    case "InternalFailure":
    case "com.amazonaws.sagemakerruntime#InternalFailure":
      throw await de_InternalFailureRes(parsedOutput, context);
    case "ModelError":
    case "com.amazonaws.sagemakerruntime#ModelError":
      throw await de_ModelErrorRes(parsedOutput, context);
    case "ModelNotReadyException":
    case "com.amazonaws.sagemakerruntime#ModelNotReadyException":
      throw await de_ModelNotReadyExceptionRes(parsedOutput, context);
    case "ServiceUnavailable":
    case "com.amazonaws.sagemakerruntime#ServiceUnavailable":
      throw await de_ServiceUnavailableRes(parsedOutput, context);
    case "ValidationError":
    case "com.amazonaws.sagemakerruntime#ValidationError":
      throw await de_ValidationErrorRes(parsedOutput, context);
    case "InternalStreamFailure":
    case "com.amazonaws.sagemakerruntime#InternalStreamFailure":
      throw await de_InternalStreamFailureRes(parsedOutput, context);
    case "ModelStreamError":
    case "com.amazonaws.sagemakerruntime#ModelStreamError":
      throw await de_ModelStreamErrorRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(SageMakerRuntimeServiceException);
var de_InternalDependencyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalDependencyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalDependencyExceptionRes");
var de_InternalFailureRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalFailure({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalFailureRes");
var de_InternalStreamFailureRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalStreamFailure({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalStreamFailureRes");
var de_ModelErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    LogStreamArn: import_smithy_client.expectString,
    Message: import_smithy_client.expectString,
    OriginalMessage: import_smithy_client.expectString,
    OriginalStatusCode: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  const exception = new ModelError({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ModelErrorRes");
var de_ModelNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ModelNotReadyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ModelNotReadyExceptionRes");
var de_ModelStreamErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    ErrorCode: import_smithy_client.expectString,
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ModelStreamError({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ModelStreamErrorRes");
var de_ServiceUnavailableRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailable({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableRes");
var de_ValidationErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationError({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationErrorRes");
var de_ResponseStream = /* @__PURE__ */ __name((output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["PayloadPart"] != null) {
      return {
        PayloadPart: await de_PayloadPart_event(event["PayloadPart"], context)
      };
    }
    if (event["ModelStreamError"] != null) {
      return {
        ModelStreamError: await de_ModelStreamError_event(event["ModelStreamError"], context)
      };
    }
    if (event["InternalStreamFailure"] != null) {
      return {
        InternalStreamFailure: await de_InternalStreamFailure_event(event["InternalStreamFailure"], context)
      };
    }
    return { $unknown: event };
  });
}, "de_ResponseStream");
var de_InternalStreamFailure_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_InternalStreamFailureRes(parsedOutput, context);
}, "de_InternalStreamFailure_event");
var de_ModelStreamError_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_ModelStreamErrorRes(parsedOutput, context);
}, "de_ModelStreamError_event");
var de_PayloadPart_event = /* @__PURE__ */ __name(async (output, context) => {
  const contents = {};
  contents.Bytes = output.body;
  return contents;
}, "de_PayloadPart_event");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _A = "Accept";
var _CA = "CustomAttributes";
var _CSI = "ClosedSessionId";
var _CT = "ContentType";
var _EE = "EnableExplanations";
var _FL = "FailureLocation";
var _ICN = "InferenceComponentName";
var _II = "InferenceId";
var _IL = "InputLocation";
var _IPV = "InvokedProductionVariant";
var _ITS = "InvocationTimeoutSeconds";
var _NSI = "NewSessionId";
var _OL = "OutputLocation";
var _RTTLS = "RequestTTLSeconds";
var _SI = "SessionId";
var _TCH = "TargetContainerHostname";
var _TM = "TargetModel";
var _TV = "TargetVariant";
var _a = "accept";
var _ct = "content-type";
var _xaipv = "x-amzn-invoked-production-variant";
var _xasa = "x-amzn-sagemaker-accept";
var _xasca = "x-amzn-sagemaker-custom-attributes";
var _xascsi = "x-amzn-sagemaker-closed-session-id";
var _xasct = "x-amzn-sagemaker-content-type";
var _xasee = "x-amzn-sagemaker-enable-explanations";
var _xasf = "x-amzn-sagemaker-failurelocation";
var _xasi = "x-amzn-sagemaker-inputlocation";
var _xasi_ = "x-amzn-sagemaker-invocationtimeoutseconds";
var _xasic = "x-amzn-sagemaker-inference-component";
var _xasii = "x-amzn-sagemaker-inference-id";
var _xasnsi = "x-amzn-sagemaker-new-session-id";
var _xaso = "x-amzn-sagemaker-outputlocation";
var _xasr = "x-amzn-sagemaker-requestttlseconds";
var _xassi = "x-amzn-sagemaker-session-id";
var _xastch = "x-amzn-sagemaker-target-container-hostname";
var _xastm = "x-amzn-sagemaker-target-model";
var _xastv = "x-amzn-sagemaker-target-variant";

// src/commands/InvokeEndpointAsyncCommand.ts
var InvokeEndpointAsyncCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerRuntime", "InvokeEndpointAsync", {}).n("SageMakerRuntimeClient", "InvokeEndpointAsyncCommand").f(InvokeEndpointAsyncInputFilterSensitiveLog, void 0).ser(se_InvokeEndpointAsyncCommand).de(de_InvokeEndpointAsyncCommand).build() {
  static {
    __name(this, "InvokeEndpointAsyncCommand");
  }
};

// src/commands/InvokeEndpointCommand.ts



var InvokeEndpointCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerRuntime", "InvokeEndpoint", {}).n("SageMakerRuntimeClient", "InvokeEndpointCommand").f(InvokeEndpointInputFilterSensitiveLog, InvokeEndpointOutputFilterSensitiveLog).ser(se_InvokeEndpointCommand).de(de_InvokeEndpointCommand).build() {
  static {
    __name(this, "InvokeEndpointCommand");
  }
};

// src/commands/InvokeEndpointWithResponseStreamCommand.ts



var InvokeEndpointWithResponseStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerRuntime", "InvokeEndpointWithResponseStream", {
  /**
   * @internal
   */
  eventStream: {
    output: true
  }
}).n("SageMakerRuntimeClient", "InvokeEndpointWithResponseStreamCommand").f(InvokeEndpointWithResponseStreamInputFilterSensitiveLog, InvokeEndpointWithResponseStreamOutputFilterSensitiveLog).ser(se_InvokeEndpointWithResponseStreamCommand).de(de_InvokeEndpointWithResponseStreamCommand).build() {
  static {
    __name(this, "InvokeEndpointWithResponseStreamCommand");
  }
};

// src/SageMakerRuntime.ts
var commands = {
  InvokeEndpointCommand,
  InvokeEndpointAsyncCommand,
  InvokeEndpointWithResponseStreamCommand
};
var SageMakerRuntime = class extends SageMakerRuntimeClient {
  static {
    __name(this, "SageMakerRuntime");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, SageMakerRuntime);
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  SageMakerRuntimeServiceException,
  __Client,
  SageMakerRuntimeClient,
  SageMakerRuntime,
  $Command,
  InvokeEndpointAsyncCommand,
  InvokeEndpointCommand,
  InvokeEndpointWithResponseStreamCommand,
  InternalDependencyException,
  InternalFailure,
  ModelError,
  ModelNotReadyException,
  ServiceUnavailable,
  ValidationError,
  InternalStreamFailure,
  ModelStreamError,
  ResponseStream,
  InvokeEndpointInputFilterSensitiveLog,
  InvokeEndpointOutputFilterSensitiveLog,
  InvokeEndpointAsyncInputFilterSensitiveLog,
  InvokeEndpointWithResponseStreamInputFilterSensitiveLog,
  PayloadPartFilterSensitiveLog,
  ResponseStreamFilterSensitiveLog,
  InvokeEndpointWithResponseStreamOutputFilterSensitiveLog
});

